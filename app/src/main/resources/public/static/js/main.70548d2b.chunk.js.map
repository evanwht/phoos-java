{"version":3,"sources":["App.jsx","api/api.js","StandingsTable.jsx","form/UserForm.jsx","form/AlertDismiss.jsx","form/PlayerSelect.jsx","form/GameEditModal.jsx","form/GameEditButton.jsx","GamesTable.jsx","Nav.jsx","form/PlayerForm.jsx","form/GameForm.jsx","serviceWorker.js","index.jsx","foos-icon-color.svg"],"names":["App","className","src","logo","alt","axios","create","baseURL","StandingsTable","props","state","standings","id","player","name","wins","losses","percentage","API","get","then","res","data","setState","this","map","standing","index","key","Math","round","toFixed","Table","size","striped","bordered","hover","variant","renderTableData","Component","UserForm","submit","submitButtonText","elements","button","Form","Row","Button","type","block","Fragment","onSubmit","AlertDismissable","heading","message","dismiss","Alert","onClose","dismissible","Heading","PlayerSelect","players","value","nickname","position","change","Col","sm","md","InputGroup","Prepend","Text","FormControl","as","required","onChange","renderPlayerOptions","GameEditModal","e","changed","target","add","delete","buttonVariant","preventDefault","put","buildGameChanges","Set","success","fail","catch","reason","render","date","p1","p2","p3","p4","t1h","t2h","t1f","t2f","bind","dismissAlert","AlertDismiss","fields","game","team1","team2","forEach","defense","parseInt","offense","team1HalfScore","team2HalfScore","team1FinalScore","team2FinalScore","Group","FormLabel","Control","max","min","xs","Modal","show","onHide","Header","Title","Body","Container","renderAlert","playerSelections","scoreSelections","onClick","GameEditButton","showModal","hideModal","handleChanged","played","refresh","renderEditModal","GamesTable","games","epochSecond","refreshPage","componentDidMount","g1","g2","sort","compareGames","i","team_1","team_2","half_scores","final_scores","winners","losers","Date","toLocaleString","Navigation","Navbar","bg","expand","fixed","Brand","Link","to","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","Divider","PlayerForm","firstname","lastname","email","post","GameForm","class","Boolean","window","location","hostname","match","ReactDOM","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","module","exports"],"mappings":"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","file":"static/js/main.70548d2b.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './foos-icon-color.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: 'http://localhost:8080/api/'\n})","import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport API from \"./api/api\";\n\nexport class StandingsTable extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            standings: [\n                { id: 1, player: { name: 'Evan White' }, wins: 1, losses: 0, percentage: 1.00 },\n                { id: 2, player: { name: 'Zach Volz' }, wins: 0, losses: 1, percentage: 0.00 }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        API.get('standings')\n            .then(res => {\n                const standings = res.data;\n                this.setState({ standings });\n            })\n    }\n\n    renderTableData() {\n        return this.state.standings.map((standing, index) => {\n            const { player, wins, losses, percentage } = standing\n            return (\n                <tr key={index}>\n                    <td className=\"align-middle\">{index + 1}</td>\n                    <td className=\"align-middle\">{player.name}</td>\n                    <td className=\"align-middle\">{wins}</td>\n                    <td className=\"align-middle\">{losses}</td>\n                    <td className=\"align-middle\">{(Math.round(percentage * 100) / 100).toFixed(2)}</td>\n                </tr>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <Table className=\"App\" size=\"sm\" striped bordered hover variant=\"dark\">\n                <thead>\n                    <tr>\n                        <th>Place</th>\n                        <th>Player</th>\n                        <th>Wins</th>\n                        <th>Losses</th>\n                        <th>Percentage</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderTableData()}\n                </tbody>\n            </Table>\n        );\n    }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nconst UserForm = props => {\n    const {\n        submit,\n        submitButtonText,\n        elements,\n    } = props;\n\n    let button = null;\n    if (props.submitButtonText) {\n        button = (\n            <Form.Row className=\"pr-1 pl-1 mb-4 mt-4\">\n                <Button variant=\"primary\" type=\"submit\" block>{submitButtonText}</Button>\n            </Form.Row>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Form onSubmit={submit}>\n                {elements()}\n                {button}\n            </Form>\n        </React.Fragment >\n    )\n}\n\nexport default UserForm;","import React from 'react';\nimport Alert from 'react-bootstrap/Alert';\n\nconst AlertDismissable = props => {\n    const {\n        variant,\n        heading,\n        message,\n        dismiss\n    } = props;\n\n    return (\n        <Alert variant={variant} onClose={dismiss} dismissible>\n            <Alert.Heading>{heading}</Alert.Heading>\n            <p>{message}</p>\n        </Alert>\n    );\n}\n\nexport default AlertDismissable;","import React, { Component } from \"react\";\nimport FormControl from 'react-bootstrap/FormControl';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport API from '../api/api';\n\nexport class PlayerSelect extends Component {\n    constructor(props) {\n        super(props);\n    };\n\n    renderPlayerOptions(players) {\n        return players.map((player) => {\n            return (\n                <option key={player.id} value={player.id}>{player.name} ({player.nickname})</option>\n            )\n        })\n    }\n\n    render() {\n        const { position, name, value, change } = this.props;\n        return (\n            <Col sm=\"12\" md=\"5\">\n                <InputGroup>\n                    <InputGroup.Prepend className=\"d-md-none d-block w-25\">\n                        <InputGroup.Text className=\"text-white\">{position}</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        as=\"select\"\n                        name={name}\n                        value={value}\n                        required\n                        onChange={change}\n                    >\n                        <option key=\"-1\" value=\"-1\"></option>\n                        {this.renderPlayerOptions(this.props.players)}\n                    </FormControl>\n                </InputGroup>\n            </Col>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport API from \"../api/api\";\nimport UserForm from \"./UserForm\";\nimport AlertDismissable from \"./AlertDismiss\";\nimport { PlayerSelect } from \"./PlayerSelect\";\n\nexport class GameEditModal extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            date: props.date,\n            p1: props.p1,\n            p2: props.p2,\n            p3: props.p3,\n            p4: props.p4,\n            t1h: props.t1h,\n            t2h: props.t2h,\n            t1f: props.t1f,\n            t2f: props.t2f,\n            players: [],\n            changed: new Set(),\n            buttonVariant: \"outline-primary\"\n        }\n        this.submit = this.submit.bind(this);\n        this.change = this.change.bind(this);\n        this.dismissAlert = this.dismissAlert.bind(this);\n    }\n\n    componentDidMount() {\n        API.get('players')\n            .then(res => {\n                const players = res.data;\n                this.setState({ players });\n            });\n    }\n\n    change = e => {\n        let changed = this.state.changed;\n        const name = e.target.name;\n        if (this.props[name] != e.target.value) {\n            changed.add(name);\n        } else {\n            changed.delete(name);\n        }\n        let buttonVariant = \"outline-primary\";\n        if (changed.size > 0) {\n            buttonVariant = \"primary\"\n        }\n        this.setState({\n            [name]: e.target.value,\n            buttonVariant: buttonVariant,\n            changed: changed\n        });\n    };\n\n    dismissAlert() {\n        this.setState({\n            success: \"\",\n            fail: \"\"\n        });\n    }\n\n    renderAlert(success, fail) {\n        if (success) {\n            return (\n                <AlertDismissable\n                    variant=\"success\"\n                    heading=\"Success\"\n                    message={success}\n                    dismiss={this.dismissAlert}\n                />\n            )\n        } else if (fail) {\n            return (\n                <AlertDismissable\n                    variant=\"danger\"\n                    heading=\"Error\"\n                    message={fail}\n                    dismiss={this.dismissAlert}\n                />\n            )\n        }\n        return null;\n    };\n\n    buildGameChanges(fields) {\n        let game = {\n            team1: {},\n            team2: {}\n        };\n        fields.forEach(name => {\n            switch (name) {\n                case \"p1\":\n                    game.team1.defense = {\n                        id: parseInt(this.state[name])\n                    }\n                    break;\n                case \"p2\":\n                    game.team1.offense = {\n                        id: parseInt(this.state[name])\n                    };\n                    break;\n                case \"p3\":\n                    game.team2.defense = {\n                        id: parseInt(this.state[name])\n                    }\n                    break;\n                case \"p4\":\n                    game.team2.offense = {\n                        id: parseInt(this.state[name])\n                    }\n                    break;\n                case \"t1h\":\n                    game.team1HalfScore = parseInt(this.state[name]);\n                    break;\n                case \"t2h\":\n                    game.team2HalfScore = parseInt(this.state[name]);\n                    break;\n                case \"t1f\":\n                    game.team1FinalScore = parseInt(this.state[name]);\n                    break;\n                case \"t2f\":\n                    game.team2FinalScore = parseInt(this.state[name]);\n                    break;\n                default:\n                    game[name] = parseInt(this.state[name]);\n\n            }\n        });\n        return game;\n    }\n\n    submit = e => {\n        e.preventDefault();\n        if (this.state.changed.size > 0) {\n            API.put(`games/${this.props.id}`, this.buildGameChanges(this.state.changed))\n                .then(res => {\n                    this.setState({\n                        changed: new Set(),\n                        success: `Successfully created game`,\n                        fail: \"\"\n                    }, () => this.props.onChange())\n                }).catch(reason => {\n                    this.setState({\n                        fail: \"Could not create game. Please try again later.\",\n                        success: \"\"\n                    }, () => this.render())\n                });\n        }\n    };\n\n    playerSelections() {\n        return (\n            <Form.Group id=\"players\">\n                <h4 className=\"pt-3 text-white text-center\">Positions</h4>\n                <div className=\"d-md-block d-sm-none d-none\">\n                    <Row className=\"pad text-white\">\n                        <Col sm=\"2\"></Col>\n                        <Col>Defense</Col>\n                        <Col>Offense</Col>\n                    </Row>\n                </div>\n                <Form.Group id=\"team-1\">\n                    <Form.Row>\n                        <Col sm=\"2\">\n                            <FormLabel className=\"text-white\">Team 1</FormLabel>\n                        </Col>\n                        <PlayerSelect\n                            value={this.state.p1}\n                            players={this.state.players}\n                            name=\"p1\"\n                            position=\"Defense\"\n                            change={this.change}\n                        />\n                        <PlayerSelect\n                            value={this.state.p2}\n                            players={this.state.players}\n                            name=\"p2\"\n                            position=\"Offense\"\n                            change={this.change}\n                        />\n                    </Form.Row>\n                </Form.Group>\n                <Form.Group id=\"team-2\">\n                    <Form.Row>\n                        <Col sm=\"2\">\n                            <FormLabel className=\"text-white\">Team 2</FormLabel>\n                        </Col>\n                        <PlayerSelect\n                            value={this.state.p3}\n                            players={this.state.players}\n                            name=\"p3\"\n                            position=\"Defense\"\n                            change={this.change}\n                        />\n                        <PlayerSelect\n                            value={this.state.p4}\n                            players={this.state.players}\n                            name=\"p4\"\n                            position=\"Offense\"\n                            change={this.change}\n                        />\n                    </Form.Row>\n                </Form.Group>\n            </Form.Group>\n        )\n    }\n\n    scoreSelections() {\n        return (\n            <Form.Group id=\"scores\">\n                <h4 className=\"pb-2 text-white text-center\">Scores</h4>\n                <Form.Group>\n                    <Form.Row>\n                        <Col className=\"pr-2\">\n                            <h5 className=\"pb-2 text-white text-center\">Half</h5>\n                            <Form.Row>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 1</FormLabel>\n                                    <Form.Control\n                                        name=\"t1h\"\n                                        type=\"number\"\n                                        value={this.state.t1h}\n                                        onChange={this.change}\n                                        max={5} min={0} required\n                                    />\n                                </Col>\n                                <Col xs=\"2\">\n                                    <FormLabel className=\"text-hide\">suh</FormLabel>\n                                    <p className=\"text-white text-center\">__</p>\n                                </Col>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 2</FormLabel>\n                                    <Form.Control\n                                        name=\"t2h\"\n                                        type=\"number\"\n                                        value={this.state.t2h}\n                                        onChange={this.change}\n                                        max={5} min={0} required\n                                    />\n                                </Col>\n                            </Form.Row>\n                        </Col>\n                        <Col className=\"pl-2\">\n                            <h5 className=\"pb-2 text-white text-center\">Final</h5>\n                            <Form.Row>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 1</FormLabel>\n                                    <Form.Control\n                                        name=\"t1f\"\n                                        type=\"number\"\n                                        value={this.state.t1f}\n                                        onChange={this.change}\n                                        max={15} min={0} required\n                                    />\n                                </Col>\n                                <Col xs=\"2\">\n                                    <FormLabel className=\"text-hide\">suh</FormLabel>\n                                    <p className=\"text-white text-center\">__</p>\n                                </Col>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 2</FormLabel>\n                                    <Form.Control\n                                        name=\"t2f\"\n                                        type=\"number\"\n                                        value={this.state.t2f}\n                                        onChange={this.change}\n                                        max={15} min={0} required\n                                    />\n                                </Col>\n                            </Form.Row>\n                        </Col>\n                    </Form.Row>\n                </Form.Group>\n            </Form.Group>\n        )\n    }\n\n    render() {\n        return (\n            <Modal size=\"lg\" show={this.props.show} onHide={this.props.onHide} variant=\"dark\">\n                <Modal.Header className=\"dark\">\n                    <Modal.Title className=\"mx-auto\">Edit Game</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"dark\">\n                    <Container>\n                        {this.renderAlert(this.state.success, this.state.fail)}\n                        <UserForm\n                            submit={this.submit}\n                            elements={() => (\n                                <React.Fragment>\n                                    {this.playerSelections()}\n                                    <hr className=\"mt-4 border-teal\" />\n                                    {this.scoreSelections()}\n                                </React.Fragment>\n                            )}\n                        />\n                        <Form.Row className=\"pr-1 pl-1 mb-4 mt-4\">\n                            <Col>\n                                <Button variant=\"secondary\" onClick={this.props.onHide} block>Cancel</Button>\n                            </Col>\n                            <Col xs=\"1\"></Col>\n                            <Col>\n                                <Button variant={this.state.buttonVariant} onClick={this.submit} block>Save</Button>\n                            </Col>\n                        </Form.Row>\n                    </Container>\n\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { GameEditModal } from './GameEditModal'\n\nexport class GameEditButton extends Component {\n    constructor(props) {\n        super(props)\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n        this.handleChanged = this.handleChanged.bind(this);\n        this.state = {\n            show: false,\n            changed: false\n        }\n    }\n\n    renderEditModal() {\n        const { id, played, p1, p2, p3, p4, t1h, t2h, t1f, t2f } = this.props;\n        if (this.state.show) {\n            return (\n                <GameEditModal\n                    show={this.state.show}\n                    onHide={this.hideModal}\n                    onChange={this.handleChanged}\n                    id={id}\n                    date={played}\n                    p1={p1}\n                    p2={p2}\n                    p3={p3}\n                    p4={p4}\n                    t1h={t1h}\n                    t2h={t2h}\n                    t1f={t1f}\n                    t2f={t2f}\n                />\n            )\n        }\n        return null;\n    }\n\n    handleChanged() {\n        this.setState({\n            changed: true\n        })\n    }\n\n    showModal() {\n        this.setState({\n            show: true\n        }, () => this.render());\n    }\n\n    hideModal() {\n        this.setState({\n            show: false\n        }, () => this.props.refresh(this.state.changed));\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outline-warning\" onClick={this.showModal}>Edit</Button>\n                {this.renderEditModal()}\n            </React.Fragment>\n        )\n    };\n}\n","import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport API from './api/api';\nimport { GameEditButton } from './form/GameEditButton';\n\nexport class GamesTable extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            games: [\n                {\n                    id: 1,\n                    played: {\n                        epochSecond: \"07-04-2021\"\n                    },\n                    team1: {\n                        defense: {\n                            id: 1,\n                            name: 'Evan White'\n                        },\n                        offense: {\n                            id: 2,\n                            name: 'Thomas Mckenna'\n                        }\n                    },\n                    team2: {\n                        defense: {\n                            id: 3,\n                            name: 'Zach Volz'\n                        },\n                        offense: {\n                            id: 4,\n                            name: 'Manny Shahugan'\n                        }\n                    },\n                    team1HalfScore: 5,\n                    team2HalfScore: 3,\n                    team1FinalScore: 10,\n                    team2FinalScore: 6\n                }\n            ]\n        }\n        this.refreshPage = this.refreshPage.bind(this);\n    }\n\n    componentDidMount() {\n        API.get('games')\n            .then(res => {\n                const games = res.data;\n                this.setState({ games });\n            });\n    }\n\n    refreshPage(refresh) {\n        if (refresh) {\n            this.componentDidMount();\n        }\n    }\n\n\n    compareGames(g1, g2) {\n        if (g1.played.epochSecond < g2.played.epochSecond) {\n            return 1;\n        } else if (g1.played.epochSecond > g2.played.epochSecond) {\n            return -1;\n        }\n        return 0;\n    }\n\n    renderTableData() {\n        let games = this.state.games;\n        games.sort(this.compareGames);\n        return this.state.games.map((game, i) => {\n            const { id, played, team1, team2, team1HalfScore, team2HalfScore, team1FinalScore, team2FinalScore } = game;\n            const team_1 = team1.defense.name + \" - \" + team1.offense.name;\n            const team_2 = team2.defense.name + \" - \" + team2.offense.name;\n            const half_scores = team1HalfScore + \" - \" + team2HalfScore;\n            const final_scores = team1FinalScore + \" - \" + team2FinalScore;\n            const winners = team1FinalScore > team2FinalScore ? team_1 : team_2;\n            const losers = team1FinalScore > team2FinalScore ? team_2 : team_1;\n            return (\n                <tr key={id}>\n                    <td className=\"align-middle text-center\">{new Date(played.epochSecond * 1000).toLocaleString()}</td>\n                    <td className=\"align-middle winners text-center\">{winners}</td>\n                    <td className=\"align-middle losers text-center\">{losers}</td>\n                    <td className=\"align-middle text-center\">{half_scores}</td>\n                    <td className=\"align-middle text-center\">{final_scores}</td>\n                    <td className=\"align-middle text-center\">\n                        <GameEditButton\n                            id={id}\n                            refresh={this.refreshPage}\n                            played={played}\n                            p1={team1.defense.id}\n                            p2={team1.offense.id}\n                            p3={team2.defense.id}\n                            p4={team2.offense.id}\n                            t1h={team1HalfScore}\n                            t2h={team2HalfScore}\n                            t1f={team1FinalScore}\n                            t2f={team2FinalScore}\n                        />\n                    </td>\n                </tr>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <Table className=\"rounded table-borderless\" size=\"sm\" striped hover variant=\"dark\">\n                <thead>\n                    <tr>\n                        <th className=\"text-center\">Date</th>\n                        <th className=\"text-center\">Winners</th>\n                        <th className=\"text-center\">Losers</th>\n                        <th className=\"text-center\">Half</th>\n                        <th className=\"text-center\">Final</th>\n                        <th className=\"text-center\">Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderTableData()}\n                </tbody>\n            </Table>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { Link } from 'react-router-dom'\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport './phoos.css';\n\nexport class Navigation extends Component {\n    render() {\n        return (\n            <Navbar bg=\"dark\" expand=\"md\" variant=\"dark\" fixed=\"top\">\n                <Navbar.Brand as={Link} to=\"/\"><img className=\"logo\" src=\"/logo.png\" alt=\"\" /></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link as={Link} to=\"/standings\">Standings</Nav.Link>\n                        <Nav.Link as={Link} to=\"/games\">Games</Nav.Link>\n                        <NavDropdown title=\"New\" id=\"nav-dropdown\">\n                            <NavDropdown.Item as={Link} to=\"/new/player\">Player</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item as={Link} to=\"/new/game\">Game</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport API from \"../api/api\";\nimport UserForm from \"./UserForm\";\nimport AlertDismissable from \"./AlertDismiss\";\n\nexport class PlayerForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstname: \"\",\n            lastname: \"\",\n            nickname: \"\",\n            email: \"\",\n            success: \"\",\n            fail: \"\"\n        }\n        this.submit = this.submit.bind(this);\n        this.change = this.change.bind(this);\n        this.dismissAlert = this.dismissAlert.bind(this);\n    };\n\n    submit = e => {\n        e.preventDefault();\n        const { firstname, lastname, nickname, email } = this.state;\n        API.post('players', {\n            name: `${firstname} ${lastname}`,\n            nickname: nickname,\n            email: email\n        }).then(res => {\n            this.setState({\n                firstname: \"\",\n                lastname: \"\",\n                nickname: \"\",\n                email: \"\",\n                success: `Successfully created user: ${firstname} ${lastname} (${nickname})`,\n                fail: \"\"\n            }, () => this.render())\n        }).catch(reason => {\n            this.setState({\n                fail: \"Could not create user. Please try again later.\",\n                success: \"\"\n            }, () => this.render())\n        });\n    };\n\n    change = e => {\n        const name = e.target.name;\n        this.setState({ [name]: e.target.value });\n    };\n\n    dismissAlert() {\n        this.setState({\n            success: \"\",\n            fail: \"\"\n        });\n    }\n\n    renderAlert(success, fail) {\n        if (success) {\n            return (\n                <AlertDismissable\n                    variant=\"success\"\n                    heading=\"Success\"\n                    message={success}\n                    dismiss={this.dismissAlert}\n                />\n            )\n        } else if (fail) {\n            return (\n                <AlertDismissable\n                    variant=\"danger\"\n                    heading=\"Error\"\n                    message={fail}\n                    dismiss={this.dismissAlert}\n                />\n            )\n        }\n        return null;\n    };\n\n    render() {\n        return (\n            <Row>\n                <Col sm=\"8\" md=\"6\" className=\"mx-auto boxed\">\n                    <h3 className=\"pb-4 pt-4 text-white text-center\">New Player</h3>\n                    {this.renderAlert(this.state.success, this.state.fail)}\n                    <UserForm\n                        submit={this.submit}\n                        submitButtonText=\"Create\"\n                        elements={() => (\n                            <React.Fragment>\n                                <FormLabel className=\"text-white\">First Name</FormLabel>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"firstname\"\n                                    value={this.state.firstname}\n                                    className=\"mb-3\"\n                                    onChange={this.change}\n                                />\n                                <FormLabel className=\"text-white\">Last Name</FormLabel>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"lastname\"\n                                    value={this.state.lastname}\n                                    className=\"mb-3\"\n                                    onChange={this.change}\n                                />\n                                <FormLabel className=\"text-white\">Nick Name</FormLabel>\n                                <Form.Control\n                                    type=\"text\"\n                                    name=\"nickname\"\n                                    value={this.state.nickname}\n                                    className=\"mb-3\"\n                                    onChange={this.change}\n                                />\n                                <FormLabel className=\"text-white\">Email</FormLabel>\n                                <Form.Control\n                                    type=\"email\"\n                                    name=\"email\"\n                                    value={this.state.email}\n                                    className=\"mb-3\"\n                                    onChange={this.change}\n                                />\n                            </React.Fragment>\n                        )}\n                    />\n                </Col>\n            </Row>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport FormLabel from 'react-bootstrap/FormLabel';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport API from \"../api/api\";\nimport UserForm from \"./UserForm\";\nimport AlertDismissable from \"./AlertDismiss\";\nimport { PlayerSelect } from \"./PlayerSelect\";\n\nexport class GameForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            p1: props.p1,\n            p2: props.p2,\n            p3: props.p3,\n            p4: props.p4,\n            t1h: props.t1h,\n            t2h: props.t2h,\n            t1f: props.t1f,\n            t2f: props.t2f,\n            players: []\n        }\n        this.submit = this.submit.bind(this);\n        this.change = this.change.bind(this);\n        this.dismissAlert = this.dismissAlert.bind(this);\n    }\n\n    componentDidMount() {\n        API.get('players')\n            .then(res => {\n                const players = res.data;\n                this.setState({ players });\n            });\n    }\n\n\n    change = e => {\n        const name = e.target.name;\n        this.setState({ [name]: e.target.value });\n    };\n\n    dismissAlert() {\n        this.setState({\n            success: \"\",\n            fail: \"\"\n        });\n    }\n\n    renderAlert(success, fail) {\n        if (success) {\n            return (\n                <AlertDismissable\n                    variant=\"success\"\n                    heading=\"Success\"\n                    message={success}\n                    dismiss={this.dismissAlert}\n                />\n            )\n        } else if (fail) {\n            return (\n                <AlertDismissable\n                    variant=\"danger\"\n                    heading=\"Error\"\n                    message={fail}\n                    dismiss={this.dismissAlert}\n                />\n            )\n        }\n        return null;\n    };\n\n    submit = e => {\n        e.preventDefault();\n        const { p1, p2, p3, p4, t1h, t2h, t1f, t2f } = this.state;\n        API.post('games', {\n            team1: {\n                defense: {\n                    id: parseInt(p1)\n                },\n                offense: {\n                    id: parseInt(p2)\n                }\n            },\n            team2: {\n                defense: {\n                    id: parseInt(p3)\n                },\n                offense: {\n                    id: parseInt(p4)\n                }\n            },\n            team1HalfScore: parseInt(t1h),\n            team2HalfScore: parseInt(t2h),\n            team1FinalScore: parseInt(t1f),\n            team2FinalScore: parseInt(t2f)\n        }).then(res => {\n            this.setState({\n                date: \"\",\n                p1: \"\",\n                p2: \"\",\n                p3: \"\",\n                p4: \"\",\n                t1h: \"\",\n                t2h: \"\",\n                t1f: \"\",\n                t2f: \"\",\n                success: `Successfully created game`,\n                fail: \"\"\n            }, () => this.render())\n        }).catch(reason => {\n            this.setState({\n                fail: \"Could not create game. Please try again later.\",\n                success: \"\"\n            }, () => this.render())\n        });\n    };\n\n    playerSelections() {\n        return (\n            <Form.Group id=\"players\">\n                <h4 className=\"pt-3 text-white text-center\">Positions</h4>\n                <div class=\"d-md-block d-sm-none d-none\">\n                    <Row className=\"pad text-white\">\n                        <Col sm=\"2\"></Col>\n                        <Col>Defense</Col>\n                        <Col>Offense</Col>\n                    </Row>\n                </div>\n                <Form.Group id=\"team-1\">\n                    <Form.Row>\n                        <Col sm=\"2\">\n                            <FormLabel className=\"text-white\">Team 1</FormLabel>\n                        </Col>\n                        <PlayerSelect\n                            value={this.state.p1}\n                            players={this.state.players}\n                            name=\"p1\"\n                            position=\"Defense\"\n                            change={this.change}\n                        />\n                        <PlayerSelect\n                            value={this.state.p2}\n                            players={this.state.players}\n                            name=\"p2\"\n                            position=\"Offense\"\n                            change={this.change}\n                        />\n                    </Form.Row>\n                </Form.Group>\n                <Form.Group id=\"team-2\">\n                    <Form.Row>\n                        <Col sm=\"2\">\n                            <FormLabel className=\"text-white\">Team 2</FormLabel>\n                        </Col>\n                        <PlayerSelect\n                            value={this.state.p3}\n                            players={this.state.players}\n                            name=\"p3\"\n                            position=\"Defense\"\n                            change={this.change}\n                        />\n                        <PlayerSelect\n                            value={this.state.p4}\n                            players={this.state.players}\n                            name=\"p4\"\n                            position=\"Offense\"\n                            change={this.change}\n                        />\n                    </Form.Row>\n                </Form.Group>\n            </Form.Group>\n        )\n    }\n\n    scoreSelections() {\n        return (\n            <Form.Group id=\"scores\">\n                <h4 className=\"pb-2 text-white text-center\">Scores</h4>\n                <Form.Group>\n                    <Form.Row>\n                        <Col className=\"pr-2\">\n                            <h5 className=\"pb-2 text-white text-center\">Half</h5>\n                            <Form.Row>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 1</FormLabel>\n                                    <Form.Control\n                                        name=\"t1h\"\n                                        type=\"number\"\n                                        value={this.state.t1h}\n                                        onChange={this.change}\n                                        max={5} min={0} required\n                                    />\n                                </Col>\n                                <Col xs=\"2\">\n                                    <FormLabel className=\"text-hide\">suh</FormLabel>\n                                    <p className=\"text-white text-center\">__</p>\n                                </Col>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 2</FormLabel>\n                                    <Form.Control\n                                        name=\"t2h\"\n                                        type=\"number\"\n                                        value={this.state.t2h}\n                                        onChange={this.change}\n                                        max={5} min={0} required\n                                    />\n                                </Col>\n                            </Form.Row>\n                        </Col>\n                        <Col className=\"pl-2\">\n                            <h5 className=\"pb-2 text-white text-center\">Final</h5>\n                            <Form.Row>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 1</FormLabel>\n                                    <Form.Control\n                                        name=\"t1f\"\n                                        type=\"number\"\n                                        value={this.state.t1f}\n                                        onChange={this.change}\n                                        max={15} min={0} required\n                                    />\n                                </Col>\n                                <Col xs=\"2\">\n                                    <FormLabel className=\"text-hide\">suh</FormLabel>\n                                    <p className=\"text-white text-center\">__</p>\n                                </Col>\n                                <Col>\n                                    <FormLabel className=\"text-white text-center\">Team 2</FormLabel>\n                                    <Form.Control\n                                        name=\"t2f\"\n                                        type=\"number\"\n                                        value={this.state.t2f}\n                                        onChange={this.change}\n                                        max={15} min={0} required\n                                    />\n                                </Col>\n                            </Form.Row>\n                        </Col>\n                    </Form.Row>\n                </Form.Group>\n            </Form.Group>\n        )\n    }\n\n    render() {\n        return (\n            <Row>\n                <Col sm=\"10\" md=\"8\" className=\"pl-0 pr-0 rounded bordered border-teal mx-auto\">\n                    <div className=\"bg-dark rounded-top border-teal bordered-bottom \">\n                        <h3 className=\"pb-4 pt-4 text-white text-center\">New Game</h3>\n                    </div>\n                    <Container>\n                        {this.renderAlert(this.state.success, this.state.fail)}\n                        <UserForm\n                            submit={this.submit}\n                            submitButtonText=\"Create\"\n                            elements={() => (\n                                <React.Fragment>\n                                    {this.playerSelections()}\n                                    <hr className=\"mt-4 border-teal\" />\n                                    {this.scoreSelections()}\n                                </React.Fragment>\n                            )}\n                        />\n                    </Container>\n                </Col>\n            </Row>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { StandingsTable } from './StandingsTable';\nimport { GamesTable } from './GamesTable';\nimport { Navigation } from './Nav';\nimport { PlayerForm } from './form/PlayerForm';\nimport { GameForm } from './form/GameForm';\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\n\nReactDOM.render(\n  <HashRouter>\n    <Navigation />\n    <Container className=\"undernav\">\n      <Switch>\n        <Route path=\"/standings\" exact component={StandingsTable} />\n        <Route path=\"/games\" exact component={GamesTable} />\n        <Route path=\"/new/game\" exact component={GameForm} />\n        <Route path=\"/new/player\" exact component={PlayerForm} />\n        <Route path=\"/\" exact component={App} />\n      </Switch>\n    </Container>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/foos-icon-color.4e353b84.svg\";"],"sourceRoot":""}