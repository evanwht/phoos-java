plugins {
  id "com.github.node-gradle.node" version "2.2.4"
}

apply plugin: 'com.github.node-gradle.node'

group 'io.phoos'
version '1.0-SNAPSHOT'

node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */
    // Version of node to use.
    version = '14.5.0'
    // Version of npm to use.
    npmVersion = '6.14.5'
    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true
//     workDir = file("${project.buildDir}/node")
//   nodeModulesDir = file("${project.projectDir}")
}

/**
 * Runs "npm run build" to build the angular app.
 */
task build(type: NpmTask) {
    inputs.files fileTree("public")
    inputs.files fileTree("src")
    inputs.file 'package.json'
    inputs.file 'package-lock.json'
    outputs.dir 'build'
  args = ['run', 'build']
}
build.dependsOn(npm_install)

/**
 * Deletes the "dist" folder containing the result of the Angular build process.
 */
// task clean(type: Delete){
//   delete "build"
// }

/**
 * Cleans everything that is created by the node plugin, i.e. the node installation and the node_modules
 * folder.
 */
// task cleanAll(type: Delete){
//   delete "build"
//   delete ".gradle"
// }
// cleanAll.dependsOn(clean)


// npm_run_build {
//     inputs.files fileTree("public")
//     inputs.files fileTree("src")
//     inputs.file 'package.json'
//     inputs.file 'package-lock.json'
//     outputs.dir 'build'
// }

// task packageUI(type: Zip) {
//     dependsOn npm_run_build
//     baseName 'ui'
//     extension 'jar'
//     destinationDir file("${projectDir}/build_packageUI")
//     from('build') {
//         // optional path under which output will be visible in Java classpath, e.g. static resources path
//         into 'static' 
//     }
// }

// configurations {
//     npmResources
// }
// configurations.default.extendsFrom(configurations.npmResources)

// artifacts {
//     npmResources(packageUI.archivePath) {
//         builtBy packageUI
//         type "jar"
//     }
// }

// build.dependsOn npm_run_build

// clean {
//     delete packageUI.archivePath
// }